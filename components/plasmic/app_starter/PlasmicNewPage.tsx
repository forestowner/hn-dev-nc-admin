// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vStZs4oovvtk4EJiDhWZhg
// Component: 7NUuJmrB3yl2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import PageLayout from "../../PageLayout"; // plasmic-import: u4-THcRWcR5h/component
import Card from "../../Card"; // plasmic-import: Qx3TyxTphiA0/component
import YouTube from "@plasmicpkgs/react-youtube";
import Statistic from "../../Statistic"; // plasmic-import: QGsbJZbOb-Jx/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vStZs4oovvtk4EJiDhWZhg/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: 7NUuJmrB3yl2/css

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
  youTube?: Flex__<typeof YouTube>;
  h1?: Flex__<"h1">;
  statistic?: Flex__<typeof Statistic>;
  upload?: Flex__<typeof UploadWrapper>;
  chart?: Flex__<typeof SimpleChart>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  enterTheExperience?: Flex__<"div">;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.columns__lXsCi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__nVvh)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__qlxXe
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__htk1Z)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__c4Mvz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ucCrc
                          )}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"131px"}
                            loading={"lazy"}
                            src={
                              "https://images.beazer.com/8a0959f8-e7ef-42b9-a047-fa4e0168bb7e-t"
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iyQpP
                            )}
                          >
                            {
                              "You'll love these brand-new single-family homes in Crosby, TX! This community is near Xtreme Off Road Park, Crosby Square, and all of your everyday conveniences. High school students in Sweetgrass Village will attend Crosby High School. The floor plans feature kitchens and casual dining rooms that are perfect for entertaining guests, great rooms that provide plenty of room for relaxation, and primary bedrooms and bathrooms that offer a peaceful retreat."
                            }
                          </div>
                        </div>
                      </Card>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__kuecT)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__wdJVa
                        )}
                        title={
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lyqEj
                              )}
                            >
                              {"Features & Amenities"}
                            </div>
                            <svg
                              data-plasmic-name={"svg"}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={"img"}
                            />
                          </React.Fragment>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pQXoe
                          )}
                        >
                          {
                            "Waterfront homesites & access to US-90\nFuture community park and playground\nGourmet kitchens with stainless-steel appliances\nStudents attend Crosby ISD"
                          }
                        </div>
                      </Card>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.columns__v2Dnu)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__rome7)}
                    >
                      <YouTube
                        data-plasmic-name={"youTube"}
                        data-plasmic-override={overrides.youTube}
                        className={classNames("__wab_instance", sty.youTube)}
                        videoId={"R6MeLqRQzYw"}
                      />

                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"You won't believe what happens next."}
                      </h1>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__qdlKb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___77UQc
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.column__wOekb
                          )}
                        >
                          <Card
                            className={classNames(
                              "__wab_instance",
                              sty.card__owEnz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___21Oj5
                              )}
                            >
                              {"something here"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lJhwl
                              )}
                            >
                              {"something here"}
                            </div>
                            <Statistic
                              data-plasmic-name={"statistic"}
                              data-plasmic-override={overrides.statistic}
                              className={classNames(
                                "__wab_instance",
                                sty.statistic
                              )}
                            />
                          </Card>
                          <Card
                            className={classNames(
                              "__wab_instance",
                              sty.card__yBdVu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__j3HT
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3IfKm
                                )}
                              >
                                {"something here"}
                              </div>
                              <UploadWrapper
                                data-plasmic-name={"upload"}
                                data-plasmic-override={overrides.upload}
                                accept={""}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload
                                )}
                                files={generateStateValueProp($state, [
                                  "upload",
                                  "files"
                                ])}
                                multiple={false}
                                onFilesChange={generateStateOnChangeProp(
                                  $state,
                                  ["upload", "files"]
                                )}
                                showUploadList={true}
                              >
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__os3Wh
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___28NhH
                                    )}
                                  >
                                    {"Upload"}
                                  </div>
                                </AntdButton>
                              </UploadWrapper>
                            </div>
                          </Card>
                          <Card
                            className={classNames(
                              "__wab_instance",
                              sty.card__m801
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lzjgJ
                              )}
                            >
                              {"something here"}
                            </div>
                            <SimpleChart
                              data-plasmic-name={"chart"}
                              data-plasmic-override={overrides.chart}
                              className={classNames(
                                "__wab_instance",
                                sty.chart
                              )}
                              data={[
                                { region: "APAC", revenue: 3294, spend: 2675 },
                                { region: "EMEA", revenue: 3245, spend: 3895 },
                                { region: "LATAM", revenue: 2165, spend: 3498 },
                                { region: "AMER", revenue: 3215, spend: 1656 }
                              ]}
                            />
                          </Card>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__aGi4J
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames("__wab_instance", sty.form),
                              extendedOnValuesChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form", "value"],
                                  FormWrapper_Helpers
                                ),
                              formItems: undefined,
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: undefined,
                              onIsSubmittingChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form", "isSubmitting"],
                                  FormWrapper_Helpers
                                ),
                              ref: ref => {
                                $refs["form"] = ref;
                              },
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form.isSubmitting"
                                }
                              ],
                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form"}
                                data-plasmic-override={overrides.form}
                                {...child$Props}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__fYcMe
                                  )}
                                  label={"Name"}
                                  name={"name"}
                                >
                                  <AntdInput
                                    className={classNames(
                                      "__wab_instance",
                                      sty.input
                                    )}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__hQhav
                                  )}
                                  label={"Message"}
                                  name={"message"}
                                >
                                  <AntdTextArea
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textArea
                                    )}
                                  />
                                </FormItemWrapper>
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__bvVwJ
                                  )}
                                  submitsForm={true}
                                  type={"primary"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xZiU0
                                    )}
                                  >
                                    {"Submit"}
                                  </div>
                                </AntdButton>
                              </FormWrapper>
                            );
                          })()}
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__yf4Rg
                            )}
                            danger={false}
                            ghost={false}
                            href={`/3dpreview`}
                            target={true}
                            type={"primary"}
                          >
                            <div
                              data-plasmic-name={"enterTheExperience"}
                              data-plasmic-override={
                                overrides.enterTheExperience
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.enterTheExperience
                              )}
                            >
                              {"Enter the experience\n"}
                            </div>
                          </AntdButton>
                        </div>
                      </div>
                    </div>
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "img",
    "svg",
    "youTube",
    "h1",
    "statistic",
    "upload",
    "chart",
    "form",
    "input",
    "textArea",
    "enterTheExperience"
  ],
  pageLayout: [
    "pageLayout",
    "img",
    "svg",
    "youTube",
    "h1",
    "statistic",
    "upload",
    "chart",
    "form",
    "input",
    "textArea",
    "enterTheExperience"
  ],
  img: ["img"],
  svg: ["svg"],
  youTube: ["youTube"],
  h1: ["h1"],
  statistic: ["statistic"],
  upload: ["upload"],
  chart: ["chart"],
  form: ["form", "input", "textArea"],
  input: ["input"],
  textArea: ["textArea"],
  enterTheExperience: ["enterTheExperience"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  img: typeof PlasmicImg__;
  svg: "svg";
  youTube: typeof YouTube;
  h1: "h1";
  statistic: typeof Statistic;
  upload: typeof UploadWrapper;
  chart: typeof SimpleChart;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  enterTheExperience: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "vStZs4oovvtk4EJiDhWZhg"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    youTube: makeNodeComponent("youTube"),
    h1: makeNodeComponent("h1"),
    statistic: makeNodeComponent("statistic"),
    upload: makeNodeComponent("upload"),
    chart: makeNodeComponent("chart"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    enterTheExperience: makeNodeComponent("enterTheExperience"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
