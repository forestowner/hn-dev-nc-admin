// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vStZs4oovvtk4EJiDhWZhg
// Component: -GsPrU0HfQrW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import PageLayout from "../../PageLayout"; // plasmic-import: u4-THcRWcR5h/component
import Accordeon from "../../Accordeon"; // plasmic-import: ZlNLF16OXtt9/component
import Stepper from "../../Stepper"; // plasmic-import: BhwuH-8AbnR9/component
import Map2 from "../../Map2"; // plasmic-import: Goxso8ZulYvQ/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Card from "../../Card"; // plasmic-import: Qx3TyxTphiA0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vStZs4oovvtk4EJiDhWZhg/projectcss
import sty from "./Plasmic_3Dpreview.module.css"; // plasmic-import: -GsPrU0HfQrW/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: IIHfWzxkw95g/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: Sm_iaxXgDLbK/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: _P3OrsYIp2eW/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: _3Dct0mxDPZF/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: OsSAIIEvE9rf/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: jJBl0NbFvBbC/icon

createPlasmicElementProxy;

export type Plasmic_3Dpreview__VariantMembers = {};
export type Plasmic_3Dpreview__VariantsArgs = {};
type VariantPropType = keyof Plasmic_3Dpreview__VariantsArgs;
export const Plasmic_3Dpreview__VariantProps = new Array<VariantPropType>();

export type Plasmic_3Dpreview__ArgsType = {};
type ArgPropType = keyof Plasmic_3Dpreview__ArgsType;
export const Plasmic_3Dpreview__ArgProps = new Array<ArgPropType>();

export type Plasmic_3Dpreview__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  stepperMenu?: Flex__<"div">;
  frame2329?: Flex__<"div">;
  frame2351?: Flex__<"div">;
  frame2330?: Flex__<"div">;
  frame2352?: Flex__<"div">;
  frame2331?: Flex__<"div">;
  frame2353?: Flex__<"div">;
  frame2332?: Flex__<"div">;
  placeholderPicture?: Flex__<"div">;
  frame2343?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  frame2327?: Flex__<"div">;
  categoryMenu?: Flex__<"div">;
  frame2324?: Flex__<"div">;
  card11?: Flex__<"div">;
  image?: Flex__<"div">;
  title?: Flex__<"div">;
  subtitle?: Flex__<"div">;
  card12?: Flex__<"div">;
  image472?: Flex__<"div">;
  title2?: Flex__<"div">;
  subtitle2?: Flex__<"div">;
  card13?: Flex__<"div">;
  image469?: Flex__<"div">;
  title3?: Flex__<"div">;
  subtitle3?: Flex__<"div">;
  frame2325?: Flex__<"div">;
  card14?: Flex__<"div">;
  image468?: Flex__<"div">;
  title4?: Flex__<"div">;
  subtitle4?: Flex__<"div">;
  card15?: Flex__<"div">;
  image473?: Flex__<"div">;
  title5?: Flex__<"div">;
  subtitle5?: Flex__<"div">;
  card16?: Flex__<"div">;
  image471?: Flex__<"div">;
  title6?: Flex__<"div">;
  subtitle6?: Flex__<"div">;
  sidebar?: Flex__<"div">;
  stepper?: Flex__<typeof Stepper>;
  bottomToolbar?: Flex__<"div">;
  map2?: Flex__<typeof Map2>;
  frame2320?: Flex__<"div">;
  popover?: Flex__<typeof AntdPopover>;
  card?: Flex__<typeof Card>;
};

export interface Default_3DpreviewProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function Plasmic_3Dpreview__RenderFunc(props: {
  variants: Plasmic_3Dpreview__VariantsArgs;
  args: Plasmic_3Dpreview__ArgsType;
  overrides: Plasmic_3Dpreview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    data-plasmic-name={"stepperMenu"}
                    data-plasmic-override={overrides.stepperMenu}
                    className={classNames(projectcss.all, sty.stepperMenu)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2329"}
                      data-plasmic-override={overrides.frame2329}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2329)}
                    >
                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg__gnxzR)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a0SBh
                        )}
                      >
                        {"Exterior"}
                      </div>
                    </Stack__>
                    <div
                      data-plasmic-name={"frame2351"}
                      data-plasmic-override={overrides.frame2351}
                      className={classNames(projectcss.all, sty.frame2351)}
                    >
                      <Icon17Icon
                        className={classNames(projectcss.all, sty.svg__wWvJj)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2330"}
                      data-plasmic-override={overrides.frame2330}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2330)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___2Nkoe)}
                        displayHeight={"23px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"23px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image22.svg",
                          fullWidth: 23,
                          fullHeight: 23,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wy2Ix
                        )}
                      >
                        {"1st Floor"}
                      </div>
                    </Stack__>
                    <div
                      data-plasmic-name={"frame2352"}
                      data-plasmic-override={overrides.frame2352}
                      className={classNames(projectcss.all, sty.frame2352)}
                    >
                      <Icon17Icon
                        className={classNames(projectcss.all, sty.svg__mu0Q)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2331"}
                      data-plasmic-override={overrides.frame2331}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2331)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__byE8F)}
                        displayHeight={"23px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"23px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image23.svg",
                          fullWidth: 23,
                          fullHeight: 23,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mDi5S
                        )}
                      >
                        {"2nd Floor"}
                      </div>
                    </Stack__>
                    <div
                      data-plasmic-name={"frame2353"}
                      data-plasmic-override={overrides.frame2353}
                      className={classNames(projectcss.all, sty.frame2353)}
                    >
                      <Icon17Icon
                        className={classNames(projectcss.all, sty.svg__g0M4)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2332"}
                      data-plasmic-override={overrides.frame2332}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2332)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ouNxO)}
                        displayHeight={"23px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"23px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image23.svg",
                          fullWidth: 23,
                          fullHeight: 23,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4VXgf
                        )}
                      >
                        {"Review"}
                      </div>
                    </Stack__>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"placeholderPicture"}
                    data-plasmic-override={overrides.placeholderPicture}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.placeholderPicture
                    )}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2343"}
                      data-plasmic-override={overrides.frame2343}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2343)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"freeBox"}
                        data-plasmic-override={overrides.freeBox}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.freeBox)}
                      >
                        <Accordeon
                          className={classNames(
                            "__wab_instance",
                            sty.accordeon__tP6Sw
                          )}
                        />

                        <Accordeon
                          className={classNames(
                            "__wab_instance",
                            sty.accordeon__dg2U7
                          )}
                        />

                        <Accordeon
                          className={classNames(
                            "__wab_instance",
                            sty.accordeon__beex1
                          )}
                        />

                        <Accordeon
                          className={classNames(
                            "__wab_instance",
                            sty.accordeon__w7K4N
                          )}
                        />

                        <Accordeon
                          className={classNames(
                            "__wab_instance",
                            sty.accordeon__ry8Ib
                          )}
                        />
                      </Stack__>
                      <Icon11Icon
                        className={classNames(projectcss.all, sty.svg__op0Kc)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"frame2327"}
                        data-plasmic-override={overrides.frame2327}
                        className={classNames(projectcss.all, sty.frame2327)}
                      >
                        <Icon12Icon
                          className={classNames(projectcss.all, sty.svg__z6M5)}
                          role={"img"}
                        />

                        <Icon13Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9Xms8
                          )}
                          role={"img"}
                        />

                        <Icon12Icon
                          className={classNames(projectcss.all, sty.svg__j9RRc)}
                          role={"img"}
                        />

                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__kQgxQ)}
                          role={"img"}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tOw3W)}
                          displayHeight={"18px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"18px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image3.svg",
                            fullWidth: 18,
                            fullHeight: 18,
                            aspectRatio: 1
                          }}
                        />

                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__m92Oo)}
                          role={"img"}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___3MpUi)}
                          displayHeight={"12px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"12px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image4.svg",
                            fullWidth: 12,
                            fullHeight: 12,
                            aspectRatio: 1
                          }}
                        />

                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__thNrc)}
                          role={"img"}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__dyU8R)}
                          displayHeight={"12px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"12px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image4.svg",
                            fullWidth: 12,
                            fullHeight: 12,
                            aspectRatio: 1
                          }}
                        />

                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__caCsS)}
                          role={"img"}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__xRas3)}
                          displayHeight={"12px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"12px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image4.svg",
                            fullWidth: 12,
                            fullHeight: 12,
                            aspectRatio: 1
                          }}
                        />

                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__rya87)}
                          role={"img"}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__pgzj4)}
                          displayHeight={"12px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"12px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image4.svg",
                            fullWidth: 12,
                            fullHeight: 12,
                            aspectRatio: 1
                          }}
                        />

                        <Icon14Icon
                          className={classNames(projectcss.all, sty.svg__gZspt)}
                          role={"img"}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__qOacg)}
                          displayHeight={"12px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"12px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image4.svg",
                            fullWidth: 12,
                            fullHeight: 12,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"categoryMenu"}
                      data-plasmic-override={overrides.categoryMenu}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.categoryMenu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fcsTp
                        )}
                      >
                        {"Cabinet Options"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xMnba
                        )}
                      >
                        {"Active Selections"}
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame2324"}
                        data-plasmic-override={overrides.frame2324}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame2324)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card11"}
                          data-plasmic-override={overrides.card11}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card11)}
                        >
                          <div
                            data-plasmic-name={"image"}
                            data-plasmic-override={overrides.image}
                            className={classNames(projectcss.all, sty.image)}
                          />

                          <div
                            data-plasmic-name={"title"}
                            data-plasmic-override={overrides.title}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title
                            )}
                          >
                            {"Cabinet Material"}
                          </div>
                          <div
                            data-plasmic-name={"subtitle"}
                            data-plasmic-override={overrides.subtitle}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.subtitle
                            )}
                          >
                            {"Pine"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card12"}
                          data-plasmic-override={overrides.card12}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card12)}
                        >
                          <div
                            data-plasmic-name={"image472"}
                            data-plasmic-override={overrides.image472}
                            className={classNames(projectcss.all, sty.image472)}
                          />

                          <div
                            data-plasmic-name={"title2"}
                            data-plasmic-override={overrides.title2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title2
                            )}
                          >
                            {"Cabinet Hardware"}
                          </div>
                          <div
                            data-plasmic-name={"subtitle2"}
                            data-plasmic-override={overrides.subtitle2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.subtitle2
                            )}
                          >
                            {"Lyon 8233 PC"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card13"}
                          data-plasmic-override={overrides.card13}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card13)}
                        >
                          <div
                            data-plasmic-name={"image469"}
                            data-plasmic-override={overrides.image469}
                            className={classNames(projectcss.all, sty.image469)}
                          />

                          <div
                            data-plasmic-name={"title3"}
                            data-plasmic-override={overrides.title3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title3
                            )}
                          >
                            {"Cabinet Finish"}
                          </div>
                          <div
                            data-plasmic-name={"subtitle3"}
                            data-plasmic-override={overrides.subtitle3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.subtitle3
                            )}
                          >
                            {"Dove Level 1 P..."}
                          </div>
                        </Stack__>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d9UQ
                        )}
                      >
                        {"Default Selections"}
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame2325"}
                        data-plasmic-override={overrides.frame2325}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame2325)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card14"}
                          data-plasmic-override={overrides.card14}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card14)}
                        >
                          <div
                            data-plasmic-name={"image468"}
                            data-plasmic-override={overrides.image468}
                            className={classNames(projectcss.all, sty.image468)}
                          />

                          <div
                            data-plasmic-name={"title4"}
                            data-plasmic-override={overrides.title4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title4
                            )}
                          >
                            {"Backsplash"}
                          </div>
                          <div
                            data-plasmic-name={"subtitle4"}
                            data-plasmic-override={overrides.subtitle4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.subtitle4
                            )}
                          >
                            {"Twilight Blue"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card15"}
                          data-plasmic-override={overrides.card15}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card15)}
                        >
                          <div
                            data-plasmic-name={"image473"}
                            data-plasmic-override={overrides.image473}
                            className={classNames(projectcss.all, sty.image473)}
                          />

                          <div
                            data-plasmic-name={"title5"}
                            data-plasmic-override={overrides.title5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title5
                            )}
                          >
                            {"Door Style"}
                          </div>
                          <div
                            data-plasmic-name={"subtitle5"}
                            data-plasmic-override={overrides.subtitle5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.subtitle5
                            )}
                          >
                            {"Henlow Full Overlay"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card16"}
                          data-plasmic-override={overrides.card16}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card16)}
                        >
                          <div
                            data-plasmic-name={"image471"}
                            data-plasmic-override={overrides.image471}
                            className={classNames(projectcss.all, sty.image471)}
                          />

                          <div
                            data-plasmic-name={"title6"}
                            data-plasmic-override={overrides.title6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.title6
                            )}
                          >
                            {"Countertop"}
                          </div>
                          <div
                            data-plasmic-name={"subtitle6"}
                            data-plasmic-override={overrides.subtitle6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.subtitle6
                            )}
                          >
                            {"Calacatta Botanica"}
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                    <div
                      data-plasmic-name={"sidebar"}
                      data-plasmic-override={overrides.sidebar}
                      className={classNames(projectcss.all, sty.sidebar)}
                    >
                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__km0H2)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image11.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__o9Aw)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image12.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img___9HsbD)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image13.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__ejj7)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image14.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__igE9)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image15.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                    <Stepper
                      data-plasmic-name={"stepper"}
                      data-plasmic-override={overrides.stepper}
                      className={classNames("__wab_instance", sty.stepper)}
                    />
                  </Stack__>
                  <div
                    data-plasmic-name={"bottomToolbar"}
                    data-plasmic-override={overrides.bottomToolbar}
                    className={classNames(projectcss.all, sty.bottomToolbar)}
                  >
                    <Map2
                      data-plasmic-name={"map2"}
                      data-plasmic-override={overrides.map2}
                      className={classNames("__wab_instance", sty.map2)}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame2320"}
                      data-plasmic-override={overrides.frame2320}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame2320)}
                    >
                      <AntdPopover
                        data-plasmic-name={"popover"}
                        data-plasmic-override={overrides.popover}
                        arrow={true}
                        className={classNames("__wab_instance", sty.popover)}
                        color={"#000000"}
                        content={
                          <Card
                            data-plasmic-name={"card"}
                            data-plasmic-override={overrides.card}
                            className={classNames("__wab_instance", sty.card)}
                          />
                        }
                        contentText={"Popover contents"}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        mouseEnterDelay={0}
                        mouseLeaveDelay={0}
                        onOpenChange={generateStateOnChangeProp($state, [
                          "popover",
                          "open"
                        ])}
                        open={generateStateValueProp($state, [
                          "popover",
                          "open"
                        ])}
                        popoverScopeClassName={sty["popover__popover"]}
                        title={null}
                      >
                        <Stack__
                          as={PlasmicImg__}
                          hasGap={true}
                          alt={""}
                          className={classNames(sty.img__cdegd)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/app_starter/images/image16.svg",
                            fullWidth: 44,
                            fullHeight: 44,
                            aspectRatio: 1
                          }}
                        />
                      </AntdPopover>
                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__g4G9K)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [undefined, "damn", "ggggggg"]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        src={{
                          src: "/plasmic/app_starter/images/image17.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__iSDrw)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image18.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__bBHvD)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image19.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />

                      <Stack__
                        as={PlasmicImg__}
                        hasGap={true}
                        alt={""}
                        className={classNames(sty.img__unEjc)}
                        displayHeight={"44px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"44px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/app_starter/images/image20.svg",
                          fullWidth: 44,
                          fullHeight: 44,
                          aspectRatio: 1
                        }}
                      />
                    </Stack__>
                    <Stack__
                      as={PlasmicImg__}
                      hasGap={true}
                      alt={""}
                      className={classNames(sty.img__izIty)}
                      displayHeight={"50px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"50px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/app_starter/images/image21.svg",
                        fullWidth: 50,
                        fullHeight: 50,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "stepperMenu",
    "frame2329",
    "frame2351",
    "frame2330",
    "frame2352",
    "frame2331",
    "frame2353",
    "frame2332",
    "placeholderPicture",
    "frame2343",
    "freeBox",
    "frame2327",
    "categoryMenu",
    "frame2324",
    "card11",
    "image",
    "title",
    "subtitle",
    "card12",
    "image472",
    "title2",
    "subtitle2",
    "card13",
    "image469",
    "title3",
    "subtitle3",
    "frame2325",
    "card14",
    "image468",
    "title4",
    "subtitle4",
    "card15",
    "image473",
    "title5",
    "subtitle5",
    "card16",
    "image471",
    "title6",
    "subtitle6",
    "sidebar",
    "stepper",
    "bottomToolbar",
    "map2",
    "frame2320",
    "popover",
    "card"
  ],
  pageLayout: [
    "pageLayout",
    "stepperMenu",
    "frame2329",
    "frame2351",
    "frame2330",
    "frame2352",
    "frame2331",
    "frame2353",
    "frame2332",
    "placeholderPicture",
    "frame2343",
    "freeBox",
    "frame2327",
    "categoryMenu",
    "frame2324",
    "card11",
    "image",
    "title",
    "subtitle",
    "card12",
    "image472",
    "title2",
    "subtitle2",
    "card13",
    "image469",
    "title3",
    "subtitle3",
    "frame2325",
    "card14",
    "image468",
    "title4",
    "subtitle4",
    "card15",
    "image473",
    "title5",
    "subtitle5",
    "card16",
    "image471",
    "title6",
    "subtitle6",
    "sidebar",
    "stepper",
    "bottomToolbar",
    "map2",
    "frame2320",
    "popover",
    "card"
  ],
  stepperMenu: [
    "stepperMenu",
    "frame2329",
    "frame2351",
    "frame2330",
    "frame2352",
    "frame2331",
    "frame2353",
    "frame2332"
  ],
  frame2329: ["frame2329"],
  frame2351: ["frame2351"],
  frame2330: ["frame2330"],
  frame2352: ["frame2352"],
  frame2331: ["frame2331"],
  frame2353: ["frame2353"],
  frame2332: ["frame2332"],
  placeholderPicture: [
    "placeholderPicture",
    "frame2343",
    "freeBox",
    "frame2327",
    "categoryMenu",
    "frame2324",
    "card11",
    "image",
    "title",
    "subtitle",
    "card12",
    "image472",
    "title2",
    "subtitle2",
    "card13",
    "image469",
    "title3",
    "subtitle3",
    "frame2325",
    "card14",
    "image468",
    "title4",
    "subtitle4",
    "card15",
    "image473",
    "title5",
    "subtitle5",
    "card16",
    "image471",
    "title6",
    "subtitle6",
    "sidebar",
    "stepper"
  ],
  frame2343: ["frame2343", "freeBox", "frame2327"],
  freeBox: ["freeBox"],
  frame2327: ["frame2327"],
  categoryMenu: [
    "categoryMenu",
    "frame2324",
    "card11",
    "image",
    "title",
    "subtitle",
    "card12",
    "image472",
    "title2",
    "subtitle2",
    "card13",
    "image469",
    "title3",
    "subtitle3",
    "frame2325",
    "card14",
    "image468",
    "title4",
    "subtitle4",
    "card15",
    "image473",
    "title5",
    "subtitle5",
    "card16",
    "image471",
    "title6",
    "subtitle6"
  ],
  frame2324: [
    "frame2324",
    "card11",
    "image",
    "title",
    "subtitle",
    "card12",
    "image472",
    "title2",
    "subtitle2",
    "card13",
    "image469",
    "title3",
    "subtitle3"
  ],
  card11: ["card11", "image", "title", "subtitle"],
  image: ["image"],
  title: ["title"],
  subtitle: ["subtitle"],
  card12: ["card12", "image472", "title2", "subtitle2"],
  image472: ["image472"],
  title2: ["title2"],
  subtitle2: ["subtitle2"],
  card13: ["card13", "image469", "title3", "subtitle3"],
  image469: ["image469"],
  title3: ["title3"],
  subtitle3: ["subtitle3"],
  frame2325: [
    "frame2325",
    "card14",
    "image468",
    "title4",
    "subtitle4",
    "card15",
    "image473",
    "title5",
    "subtitle5",
    "card16",
    "image471",
    "title6",
    "subtitle6"
  ],
  card14: ["card14", "image468", "title4", "subtitle4"],
  image468: ["image468"],
  title4: ["title4"],
  subtitle4: ["subtitle4"],
  card15: ["card15", "image473", "title5", "subtitle5"],
  image473: ["image473"],
  title5: ["title5"],
  subtitle5: ["subtitle5"],
  card16: ["card16", "image471", "title6", "subtitle6"],
  image471: ["image471"],
  title6: ["title6"],
  subtitle6: ["subtitle6"],
  sidebar: ["sidebar"],
  stepper: ["stepper"],
  bottomToolbar: ["bottomToolbar", "map2", "frame2320", "popover", "card"],
  map2: ["map2"],
  frame2320: ["frame2320", "popover", "card"],
  popover: ["popover", "card"],
  card: ["card"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  stepperMenu: "div";
  frame2329: "div";
  frame2351: "div";
  frame2330: "div";
  frame2352: "div";
  frame2331: "div";
  frame2353: "div";
  frame2332: "div";
  placeholderPicture: "div";
  frame2343: "div";
  freeBox: "div";
  frame2327: "div";
  categoryMenu: "div";
  frame2324: "div";
  card11: "div";
  image: "div";
  title: "div";
  subtitle: "div";
  card12: "div";
  image472: "div";
  title2: "div";
  subtitle2: "div";
  card13: "div";
  image469: "div";
  title3: "div";
  subtitle3: "div";
  frame2325: "div";
  card14: "div";
  image468: "div";
  title4: "div";
  subtitle4: "div";
  card15: "div";
  image473: "div";
  title5: "div";
  subtitle5: "div";
  card16: "div";
  image471: "div";
  title6: "div";
  subtitle6: "div";
  sidebar: "div";
  stepper: typeof Stepper;
  bottomToolbar: "div";
  map2: typeof Map2;
  frame2320: "div";
  popover: typeof AntdPopover;
  card: typeof Card;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_3Dpreview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_3Dpreview__VariantsArgs;
    args?: Plasmic_3Dpreview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_3Dpreview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmic_3Dpreview__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmic_3Dpreview__ArgProps,
          internalVariantPropNames: Plasmic_3Dpreview__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmic_3Dpreview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_3Dpreview";
  } else {
    func.displayName = `Plasmic_3Dpreview.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "vStZs4oovvtk4EJiDhWZhg"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const Plasmic_3Dpreview = Object.assign(
  // Top-level Plasmic_3Dpreview renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    stepperMenu: makeNodeComponent("stepperMenu"),
    frame2329: makeNodeComponent("frame2329"),
    frame2351: makeNodeComponent("frame2351"),
    frame2330: makeNodeComponent("frame2330"),
    frame2352: makeNodeComponent("frame2352"),
    frame2331: makeNodeComponent("frame2331"),
    frame2353: makeNodeComponent("frame2353"),
    frame2332: makeNodeComponent("frame2332"),
    placeholderPicture: makeNodeComponent("placeholderPicture"),
    frame2343: makeNodeComponent("frame2343"),
    freeBox: makeNodeComponent("freeBox"),
    frame2327: makeNodeComponent("frame2327"),
    categoryMenu: makeNodeComponent("categoryMenu"),
    frame2324: makeNodeComponent("frame2324"),
    card11: makeNodeComponent("card11"),
    image: makeNodeComponent("image"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    card12: makeNodeComponent("card12"),
    image472: makeNodeComponent("image472"),
    title2: makeNodeComponent("title2"),
    subtitle2: makeNodeComponent("subtitle2"),
    card13: makeNodeComponent("card13"),
    image469: makeNodeComponent("image469"),
    title3: makeNodeComponent("title3"),
    subtitle3: makeNodeComponent("subtitle3"),
    frame2325: makeNodeComponent("frame2325"),
    card14: makeNodeComponent("card14"),
    image468: makeNodeComponent("image468"),
    title4: makeNodeComponent("title4"),
    subtitle4: makeNodeComponent("subtitle4"),
    card15: makeNodeComponent("card15"),
    image473: makeNodeComponent("image473"),
    title5: makeNodeComponent("title5"),
    subtitle5: makeNodeComponent("subtitle5"),
    card16: makeNodeComponent("card16"),
    image471: makeNodeComponent("image471"),
    title6: makeNodeComponent("title6"),
    subtitle6: makeNodeComponent("subtitle6"),
    sidebar: makeNodeComponent("sidebar"),
    stepper: makeNodeComponent("stepper"),
    bottomToolbar: makeNodeComponent("bottomToolbar"),
    map2: makeNodeComponent("map2"),
    frame2320: makeNodeComponent("frame2320"),
    popover: makeNodeComponent("popover"),
    card: makeNodeComponent("card"),

    // Metadata about props expected for Plasmic_3Dpreview
    internalVariantProps: Plasmic_3Dpreview__VariantProps,
    internalArgProps: Plasmic_3Dpreview__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default Plasmic_3Dpreview;
/* prettier-ignore-end */
