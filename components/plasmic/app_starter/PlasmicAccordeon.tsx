// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vStZs4oovvtk4EJiDhWZhg
// Component: ZlNLF16OXtt9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: vStZs4oovvtk4EJiDhWZhg/projectcss
import sty from "./PlasmicAccordeon.module.css"; // plasmic-import: ZlNLF16OXtt9/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: qejXrrKj2Fas/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: Rai1yfwRpdnn/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: lmaM0st-iGqH/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: _P3OrsYIp2eW/icon

createPlasmicElementProxy;

export type PlasmicAccordeon__VariantMembers = {};
export type PlasmicAccordeon__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccordeon__VariantsArgs;
export const PlasmicAccordeon__VariantProps = new Array<VariantPropType>();

export type PlasmicAccordeon__ArgsType = {};
type ArgPropType = keyof PlasmicAccordeon__ArgsType;
export const PlasmicAccordeon__ArgProps = new Array<ArgPropType>();

export type PlasmicAccordeon__OverridesType = {
  root?: Flex__<"div">;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  option3?: Flex__<"div">;
  popover?: Flex__<typeof AntdPopover>;
  popover2?: Flex__<typeof AntdPopover>;
};

export interface DefaultAccordeonProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccordeon__RenderFunc(props: {
  variants: PlasmicAccordeon__VariantsArgs;
  args: PlasmicAccordeon__ArgsType;
  overrides: PlasmicAccordeon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "popover2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateCollapseOpen"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["collapse", "open"]
                },
                operation: 0
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateCollapseOpen"] != null &&
          typeof $steps["updateCollapseOpen"] === "object" &&
          typeof $steps["updateCollapseOpen"].then === "function"
        ) {
          $steps["updateCollapseOpen"] = await $steps["updateCollapseOpen"];
        }
      }}
    >
      {(() => {
        const child$Props = {
          bordered: false,
          className: classNames("__wab_instance", sty.collapse),
          collapsible: "header",
          defaultOpen: false,
          expandIcon: (
            <Icon11Icon
              className={classNames(projectcss.all, sty.svg__lw2Ro)}
              onClick={async event => {
                const $steps = {};
              }}
              role={"img"}
            />
          ),

          expandIconPosition: "end",
          extra: (
            <div className={classNames(projectcss.all, sty.freeBox__nm6Lf)}>
              <AntdPopover
                data-plasmic-name={"popover"}
                data-plasmic-override={overrides.popover}
                arrow={true}
                className={classNames("__wab_instance", sty.popover)}
                content={null}
                contentText={"Popover contents"}
                defaultOpen={false}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={generateStateOnChangeProp($state, [
                  "popover",
                  "open"
                ])}
                open={generateStateValueProp($state, ["popover", "open"])}
                popoverScopeClassName={sty["popover__popover"]}
                title={null}
              >
                <Icon20Icon
                  className={classNames(projectcss.all, sty.svg__wcc8Z)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCollapseOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["collapse", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCollapseOpen"] != null &&
                      typeof $steps["updateCollapseOpen"] === "object" &&
                      typeof $steps["updateCollapseOpen"].then === "function"
                    ) {
                      $steps["updateCollapseOpen"] = await $steps[
                        "updateCollapseOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </AntdPopover>
              <AntdPopover
                data-plasmic-name={"popover2"}
                data-plasmic-override={overrides.popover2}
                arrow={true}
                className={classNames("__wab_instance", sty.popover2)}
                content={null}
                contentText={"Popover contents"}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                mouseEnterDelay={0}
                mouseLeaveDelay={0}
                onOpenChange={generateStateOnChangeProp($state, [
                  "popover2",
                  "open"
                ])}
                open={generateStateValueProp($state, ["popover2", "open"])}
                popoverScopeClassName={sty["popover2__popover"]}
                title={null}
              >
                <Icon21Icon
                  className={classNames(projectcss.all, sty.svg__agme8)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCollapseOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["collapse", "open"]
                            },
                            operation: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCollapseOpen"] != null &&
                      typeof $steps["updateCollapseOpen"] === "object" &&
                      typeof $steps["updateCollapseOpen"].then === "function"
                    ) {
                      $steps["updateCollapseOpen"] = await $steps[
                        "updateCollapseOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </AntdPopover>
            </div>
          ),
          forceRender: false,
          ghost: false,
          label2: (
            <div className={classNames(projectcss.all, sty.freeBox__vfZv)}>
              <Icon7Icon
                className={classNames(projectcss.all, sty.svg__zHyT)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ar81N
                )}
              >
                {"Collapse Header"}
              </div>
            </div>
          ),
          onChange: generateStateOnChangePropForCodeComponents(
            $state,
            "open",
            ["collapse", "open"],
            AntdSingleCollapse_Helpers
          ),
          open: generateStateValueProp($state, ["collapse", "open"]),
          rotateCustomExpandIcon: true,
          showArrow: true,
          size: "small"
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "open",
              plasmicStateName: "collapse.open"
            }
          ],
          [],
          AntdSingleCollapse_Helpers ?? {},
          child$Props
        );

        return (
          <AntdSingleCollapse
            data-plasmic-name={"collapse"}
            data-plasmic-override={overrides.collapse}
            {...child$Props}
          >
            <AntdRadioGroup
              data-plasmic-name={"radioGroup2"}
              data-plasmic-override={overrides.radioGroup2}
              className={classNames("__wab_instance", sty.radioGroup2)}
              disabled={false}
              onChange={generateStateOnChangeProp($state, [
                "radioGroup2",
                "value"
              ])}
              optionType={"default"}
              options={(() => {
                const __composite = [
                  { value: "option1", label: "Option 1" },
                  { value: "option2", label: "Option 2" },
                  { value: null, label: null }
                ];
                __composite["2"]["value"] = "vd";
                __composite["2"]["label"] = "dvd";
                return __composite;
              })()}
              useChildren={true}
              value={generateStateValueProp($state, ["radioGroup2", "value"])}
            >
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__ugyZ)}
                value={"op1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fy3Zn
                  )}
                >
                  {"Option 1"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__xCNwF)}
                value={"op2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wftCj
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
              <AntdRadio
                className={classNames("__wab_instance", sty.radio__srj0P)}
                value={"op2"}
              >
                <div
                  data-plasmic-name={"option3"}
                  data-plasmic-override={overrides.option3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.option3
                  )}
                >
                  {"Option 2"}
                </div>
              </AntdRadio>
            </AntdRadioGroup>
          </AntdSingleCollapse>
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "collapse", "radioGroup2", "option3", "popover", "popover2"],
  collapse: ["collapse", "radioGroup2", "option3", "popover", "popover2"],
  radioGroup2: ["radioGroup2", "option3"],
  option3: ["option3"],
  popover: ["popover"],
  popover2: ["popover2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  collapse: typeof AntdSingleCollapse;
  radioGroup2: typeof AntdRadioGroup;
  option3: "div";
  popover: typeof AntdPopover;
  popover2: typeof AntdPopover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordeon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordeon__VariantsArgs;
    args?: PlasmicAccordeon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordeon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccordeon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccordeon__ArgProps,
          internalVariantPropNames: PlasmicAccordeon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccordeon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordeon";
  } else {
    func.displayName = `PlasmicAccordeon.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordeon = Object.assign(
  // Top-level PlasmicAccordeon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    collapse: makeNodeComponent("collapse"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    option3: makeNodeComponent("option3"),
    popover: makeNodeComponent("popover"),
    popover2: makeNodeComponent("popover2"),

    // Metadata about props expected for PlasmicAccordeon
    internalVariantProps: PlasmicAccordeon__VariantProps,
    internalArgProps: PlasmicAccordeon__ArgProps
  }
);

export default PlasmicAccordeon;
/* prettier-ignore-end */
